// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210305223252_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLayer.Entities.QueueTaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("PercentComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("QueueTaskStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QueueTaskStatusId");

                    b.ToTable("QueueTasks");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.QueueTaskStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("QueueTaskStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Создана. Ожидает начала работы",
                            Name = "WaitingToStart"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Выполняется",
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Завершена",
                            Name = "Complete"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Пауза",
                            Name = "Pause"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ошибка",
                            Name = "Error"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.QueueTaskEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.QueueTaskStatusEntity", "QueueTaskStatus")
                        .WithMany()
                        .HasForeignKey("QueueTaskStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QueueTaskStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
